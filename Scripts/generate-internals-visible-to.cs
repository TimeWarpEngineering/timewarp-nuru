#!/usr/bin/dotnet --
#:property LangVersion=preview
#:property EnablePreviewFeatures=true

using System.Globalization;
using System.Text;

// Get the repo root
string scriptDir = AppContext.GetData("EntryPointFileDirectoryPath") as string
  ?? throw new InvalidOperationException("Could not get entry point directory");
string repoRoot = Path.GetFullPath(Path.Combine(scriptDir, ".."));
string testsDir = Path.Combine(repoRoot, "Tests");
string outputFile = Path.Combine(repoRoot, "Source/TimeWarp.Nuru.Parsing/InternalsVisibleTo.g.cs");

// Find all .cs files in Tests directory (single-file scripts)
List<string> testFiles = Directory.GetFiles(testsDir, "*.cs", SearchOption.AllDirectories)
  .Where(f => !f.Contains("/obj/", StringComparison.Ordinal) && !f.Contains("/bin/", StringComparison.Ordinal))
  .Select(Path.GetFileNameWithoutExtension)
  .Where(name => !string.IsNullOrEmpty(name))
  .Order()
  .ToList()!;

Console.WriteLine(string.Create(CultureInfo.InvariantCulture, $"Found {testFiles.Count} test files"));

// Generate the InternalsVisibleTo attributes
var sb = new StringBuilder();
sb.AppendLine("// <auto-generated />");
sb.AppendLine("// This file is generated by Scripts/generate-internals-visible-to.cs");
sb.AppendLine("// DO NOT EDIT MANUALLY");
sb.AppendLine();
sb.AppendLine("using System.Runtime.CompilerServices;");
sb.AppendLine();

foreach (string testName in testFiles)
{
  sb.Append(CultureInfo.InvariantCulture, $"[assembly: InternalsVisibleTo(\"{testName}\")]");
  sb.AppendLine();
}

// Write the file
File.WriteAllText(outputFile, sb.ToString());

Console.WriteLine($"Generated {outputFile}");
Console.WriteLine($"Added InternalsVisibleTo for {testFiles.Count} test assemblies");

return 0;
