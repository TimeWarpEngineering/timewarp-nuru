name: NuGet Publish

on:
  push:
    branches:
      - master
    paths:
      - 'Source/**'
      - 'Samples/**'
      - 'Tests/**'
      - 'Scripts/**'
      - '.github/workflows/**'
      - 'Directory.Build.props'
      - 'Directory.Packages.props'
  pull_request:
    branches:
      - master
    paths:
      - 'Source/**'
      - 'Samples/**'
      - 'Tests/**'
      - 'Scripts/**'
      - '.github/workflows/**'
      - 'Directory.Build.props'
      - 'Directory.Packages.props'
  release:
    types: [published] # Triggered when a release is published via GitHub Releases UI or gh CLI
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., 2.1.0-beta.6)'
        required: false
        type: string

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for MinVer to read all tags

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '10.0.x'

      - name: Create artifacts directory
        run: mkdir -p artifacts/packages

      - name: Build and Test
        run: |
          echo "Running build script..."
          dotnet ${{ github.workspace }}/Scripts/Build.cs

          echo "Running Nuru unit tests (lexer, parser, routing)..."
          dotnet ${{ github.workspace }}/Tests/Scripts/run-nuru-tests.cs

          echo "Running MCP tool tests..."
          dotnet ${{ github.workspace }}/Tests/TimeWarp.Nuru.Mcp.Tests/run-mcp-tests.cs

          echo "Running integration tests (Delegate vs Mediator)..."
          cd Tests
          ./test-both-versions.sh

      - name: Check if version already published (Releases only)
        if: github.event_name == 'release'
        run: dotnet ${{ github.workspace }}/Scripts/CheckVersion.cs

      - name: Publish to NuGet.org (Releases only)
        if: github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && github.event.inputs.version != '')
        run: |
          # Get version from either release tag or manual input
          if [ "${{ github.event_name }}" == "release" ]; then
            VERSION="${{ github.event.release.tag_name }}"
            VERSION="${VERSION#v}"  # Remove 'v' prefix if present
          else
            VERSION="${{ github.event.inputs.version }}"
          fi
          
          echo "Publishing version: $VERSION"

          dotnet nuget push artifacts/packages/TimeWarp.Nuru.$VERSION.nupkg \
            --api-key ${{ secrets.NUGET_API_KEY }} \
            --source https://api.nuget.org/v3/index.json \
            --skip-duplicate
          dotnet nuget push artifacts/packages/TimeWarp.Nuru.Analyzers.$VERSION.nupkg \
            --api-key ${{ secrets.NUGET_API_KEY }} \
            --source https://api.nuget.org/v3/index.json \
            --skip-duplicate
          dotnet nuget push artifacts/packages/TimeWarp.Nuru.Logging.$VERSION.nupkg \
            --api-key ${{ secrets.NUGET_API_KEY }} \
            --source https://api.nuget.org/v3/index.json \
            --skip-duplicate
          dotnet nuget push artifacts/packages/TimeWarp.Nuru.Mcp.$VERSION.nupkg \
            --api-key ${{ secrets.NUGET_API_KEY }} \
            --source https://api.nuget.org/v3/index.json \
            --skip-duplicate
        env:
          DOTNET_NUGET_SIGNATURE_VERIFICATION: false

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Packages-${{ github.run_number }}
          path: artifacts/packages/*.nupkg