#!/usr/bin/dotnet --
// subcommand-app-di - Nuru DI/class-based version of Cocona's GettingStarted.SubCommandApp
#:project ../../../Source/TimeWarp.Nuru/TimeWarp.Nuru.csproj

using TimeWarp.Nuru;
using TimeWarp.Mediator;
using Microsoft.Extensions.DependencyInjection;
using static System.Console;

// CLI app demonstrating sub-commands with DI/Mediator pattern
var app = new NuruAppBuilder()
    .AddDependencyInjection(config => config.RegisterServicesFromAssembly(typeof(HelloCommand).Assembly))
    
    // Top-level commands
    .AddRoute<HelloCommand>("hello {name|Your name} --to-upper-case,-u|Print a name converted to upper-case {toUpperCase:bool}")
    .AddRoute<ByeCommand>("bye {name|Your name} --to-lower-case,-l|Print a name converted to lower-case {toLowerCase:bool}")
    
    // Sub-commands
    .AddRoute<KonnichiwaCommand>("sub-commands konnichiwa {member}")
    .AddRoute<SubHelloCommand>("sub-commands hello")
    
    // Sub-sub-commands
    .AddRoute<FoobarCommand>("sub-commands sub-sub-commands foobar")
    .AddRoute<PrimaryCommand>("sub-commands sub-sub-commands {value:string}")
    
    .AddAutoHelp()
    .Build();

return await app.RunAsync(args);

// Top-level commands
public sealed class HelloCommand : IRequest
{
    public string Name { get; set; } = string.Empty;
    public bool ToUpperCase { get; set; }
    
    internal sealed class Handler : IRequestHandler<HelloCommand>
    {
        public async Task Handle(HelloCommand request, CancellationToken cancellationToken)
        {
            WriteLine($"Hello {(request.ToUpperCase ? request.Name.ToUpper() : request.Name)}!");
            await Task.CompletedTask;
        }
    }
}

public sealed class ByeCommand : IRequest
{
    public string Name { get; set; } = string.Empty;
    public bool ToLowerCase { get; set; }
    
    internal sealed class Handler : IRequestHandler<ByeCommand>
    {
        public async Task Handle(ByeCommand request, CancellationToken cancellationToken)
        {
            WriteLine($"Goodbye {(request.ToLowerCase ? request.Name.ToLower() : request.Name)}!");
            await Task.CompletedTask;
        }
    }
}

// Sub-commands
public sealed class KonnichiwaCommand : IRequest
{
    public Member Member { get; set; }
    
    internal sealed class Handler : IRequestHandler<KonnichiwaCommand>
    {
        public async Task Handle(KonnichiwaCommand request, CancellationToken cancellationToken)
        {
            WriteLine($"Konnichiwa! {request.Member}");
            await Task.CompletedTask;
        }
    }
}

public sealed class SubHelloCommand : IRequest
{
    internal sealed class Handler : IRequestHandler<SubHelloCommand>
    {
        public async Task Handle(SubHelloCommand request, CancellationToken cancellationToken)
        {
            WriteLine("Hello!");
            await Task.CompletedTask;
        }
    }
}

// Sub-sub-commands
public sealed class FoobarCommand : IRequest
{
    internal sealed class Handler : IRequestHandler<FoobarCommand>
    {
        public async Task Handle(FoobarCommand request, CancellationToken cancellationToken)
        {
            WriteLine("Foobar!");
            await Task.CompletedTask;
        }
    }
}

public sealed class PrimaryCommand : IRequest
{
    public string Value { get; set; } = string.Empty;
    
    internal sealed class Handler : IRequestHandler<PrimaryCommand>
    {
        public async Task Handle(PrimaryCommand request, CancellationToken cancellationToken)
        {
            WriteLine($"value={request.Value}");
            await Task.CompletedTask;
        }
    }
}

// Enum for member parameter
public enum Member
{
    Alice,
    Karen
}